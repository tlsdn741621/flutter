#플러터 #모바일개발
텍스트 위젯 

Text 위젯 예제 코드

Text(
// 작성하고 싶은 글
' 코드팩토리', // 글자에 스타일 적용
style: TextStyle(
// 글자 크기
fontSize: 16.0,
// 글자 굵기
fontWeight: FontWeight.w700,
// 글자 색상
color: Colors.blue,
)
)

Button 위젯

// TextButton 코드

TextButton(
  // 클릭 시 실행할 함수
  onPressed: () {}, 
  // 스타일 지정
  style: TextButton.styleFrom(
    // 주색상 지정
    foregroundColor: Colors.red,
  ),
  // 버튼에 넣을 위젯
  child: Text('텍스트 버튼'),
),

// OutlinedButton 예제
OutlinedButton(
  // 클릭 시 실행할 함수
  onPressed: () {}, 
  // 버튼 스타일 지정
  style: OutlinedButton.styleFrom(
    foregroundColor: Colors.red,
  ),
  // 버튼에 넣을 위젯
  child: Text('아웃라인드 버튼'),
),

// ElevatedButton 예제
ElevatedButton(
  // 클릭 시 실행할 함수
  onPressed: () {}, 
  // 버튼 스타일 지정
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.red,
  ),
  // 버튼에 넣을 위젯
  child: Text('엘리베이티드 버튼'),
),

================================================
모바일개발, 알림 메세지 보여주기 UI, 
스낵바, 화면 아래에서 3초 정도 나타내고 사라지는 메세지 .
기본 문법. 

// SnackBar를 보여주는 함수
  void _showSnackBar(BuildContext context) {
    final snackBar = SnackBar(
      content: Text('스낵바가 표시되었습니다!'), // 스낵바 안에 표시할 텍스트

      duration: Duration(seconds: 3), // 스낵바가 화면에 표시되는 시간

      backgroundColor: Colors.indigo, // 배경색 지정

      behavior: SnackBarBehavior.fixed, // fixed 또는 floating 설정 가능

      elevation: 6.0, // 그림자 깊이 (부유 느낌)

      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8.0), // 모서리 둥글게
      ),                             

      action: SnackBarAction(
        label: '클릭', // 버튼 텍스트
        textColor: Colors.yellow, // 텍스트 색상

        onPressed: () {
          // 클릭 이벤트 처리: 예를 들어 로그 출력
          print('SnackBar의 클릭 액션 실행됨');
        },
      ),
    );

    // ScaffoldMessenger를 통해 현재 context에 SnackBar 표시
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

🧩 SnackBar 주요 옵션 요약
옵션	설명
content	텍스트 또는 위젯을 삽입
duration	표시 시간 (예: Duration(seconds: 3))
backgroundColor	배경색 지정
behavior	fixed(기본) 또는 floating (둥둥 떠 있는 느낌)
elevation	그림자 깊이
shape	테두리 모양 (예: 둥글게)
action	클릭 가능한 버튼 추가 (label, onPressed)

간단한 구조의 , 스낵바 이용법. 


Center(
              child: Builder(
                builder: (context) => TextButton(
                  onPressed: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('스낵바가 표시되었습니다!')),
                    );
                  },
                  child: const Text('스낵바 보기'),
                ),
              ),
            ),
==================================================================================
IconButton 위젯


예제코드
IconButton 예제

IconButton(
onPressed: () {},
icon: Icon(
// ① 플러터에서 기본으로 제공하는 아이콘입니다.
// 제공되는 아이콘 목록은 다음 링크에서 확인해볼 수 있습니다.
// https://fonts.google.com/icons
Icons.home)),




GestureDetector 위젯

예제코드

GestureDetector(
  // 한 번 탭했을 때 실행할 함수
  onTap: () {
    // 출력 결과는 안드로이드 스튜디오의 [Run] 탭에서 확인 가능합니다.
    print('on tap');
  },
  // 두 번 탭했을 때 실행할 함수
  onDoubleTap: () {
    print('on double tap');
  },
  // 길게 눌렀을 때 실행할 함수
  onLongPress: () {
    print('on long press');
  },
  // 제스처를 적용할 위젯
  child: Container(
    decoration: BoxDecoration(
      color: Colors.red,
    ),
    width: 100.0,
    height: 100.0,
  ),
),

표로 만들어줘
GestureDetector 위젯에서 제공하는 제스처 매개변수 

매개변수           설명
onTap             한 번 탭했을 때 실행되는 
함수를 입력할 수 있습니다.

onDoubleTap       두 번 연속으로 탭했을 때 
실행되는 함수를 입력할 수 있습니다.

onLongPress       길게 누르기가 인식됐을 때 
실행되는 함수를 입력할 수 있습니다.

onPanStart        수평 또는 수직으로 드래그가 시작됐을 때 
실행되는 함수를 입력할 수 있습니다.

onPanUpdate       수평 또는 수직으로 드래그를 하는 
동안 드래그 위치가 업데이트될 때마다 실행되는 
함수를 입력할 수 있습니다.

onPanEnd          수평 또는 수직으로 드래그가 끝났을 때 
실행되는 함수를 입력할 수 있습니다.

onHorizontalDragStart   수평으로 드래그를 시작했을 때 
실행되는 함수를 입력할 수 있습니다.

onHorizontalDragUpdate  수평으로 드래그를 하는 동안 
드래그 위치가 업데이트될 때마다 실행되는 함수를 입력할 수 있습니다.

매개변수               설명
onHorizontalDragEnd    수평으로 드래그가 끝났을 때 
실행되는 함수를 입력할 수 있습니다.

onVerticalDragStart    수직으로 드래그를 시작했을 때 
실행되는 함수를 입력할 수 있습니다.

onVerticalDragUpdate   수직으로 드래그를 하는 동안 드래그 
위치가 업데이트될 때마다 실행되는 함수를 입력할 수 있습니다.

onVerticalDragEnd      수직으로 드래그가 끝났을 때 실행되는 
함수를 입력할 수 있습니다.

onScaleStart           확대가 시작됐을 때 실행되는 함수를 
입력할 수 있습니다.

onScaleUpdate          확대가 진행되는 동안 확대가 
업데이트될 때마다 실행되는 함수를 입력할 수 있습니다.

onScaleEnd             확대가 끝났을 때 실행되는 함수를 
입력할 수 있습니다.


 https://api.flutter.dev/flutter/widgets/GestureDetector-class.html
 

========================================
플로팅 액션 버튼, ( 마치 화면 둥둥 떠있는 버튼, 
웹, 탑 버튼과 비슷함. )
주의 사항, 
scaffold 내부에 위치 해야함. 

floatingActionButton: FloatingActionButton(
  onPressed: () {
    // 버튼 클릭 시 실행할 코드
  },
  child: Icon(Icons.add), // 버튼 내부 아이콘
  backgroundColor: Colors.blue, // 배경색
  tooltip: '추가', // 툴팁 텍스트 (길게 누를 때 표시)
  elevation: 6.0, // 그림자 깊이
),
floatingActionButton: 은 Scaffold 내부에 위치

child: 에는 일반적으로 Icon, Text, 또는 Image 등이 들어감

위치 옵션. 
floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,

주요 위치 옵션:
옵션	설명
endFloat (기본값)	오른쪽 하단에 뜸
centerFloat	화면 하단 중앙에 위치
startFloat	왼쪽 하단
endDocked	하단 앱바 오른쪽
centerDocked	하단 앱바 중앙

========================================
디자인 관련 위젯


디자인 관련 위젯은 배경을 추가하거나 간격을 추가하거나 
패딩을 추가하는 등 디자인적 요소를 적용할 때 사용


Container 위젯

Container 위젯은 말 그대로 다른 위젯을 담는데 사용됩니다. 
위젯의 너비와 높이를 지정하거나, 배경이나 테두리를 추가할 때 
많이 사용

예제코드

Container 위젯

Container(
  // 스타일 적용
  decoration: BoxDecoration(
    // 배경색 적용
    color: Colors.red,
    // 테두리 적용
    border: Border.all(
      // 테두리 굵기
      width: 16.0,
      // 테두리 색상
      color: Colors.black,
    ),
    // 모서리 둥글게 만들기
    borderRadius: BorderRadius.circular(16.0),
  ),
  // 높이
  height: 200.0,
  // 너비
  width: 100.0,
)


SizedBox 위젯

SizedBox 위젯은 일반적으로 일정 크기의 공간을 
공백으로 두고 싶을 때 사용


Container 위젯을 사용해도 공백을 만들 수 있지만 
SizedBox는 const 생성자를 사용했을 때 
퍼포먼스에서 이점

예제코드

SizedBox(
  // 높이 지정
  height: 200.0,
  // 너비 지정
  width: 200.0,
  // SizedBox는 색상이 없으므로 크기를 확인하는 
  // 용도로 Container 추가
  child: Container(
    color: Colors.red,
  ),
)



Padding 위젯

Padding 위젯은 child 위젯에 여백을 제공할 때 사용

Padding 위젯의 상위 위젯과 
하위 위젯 사이의 여백을 둘 수 있습니다. 


예제코드

Container(
  color: Colors.blue,
  child: Padding(
    // 상하, 좌우로 모두 16픽셀만큼 패딩 적용
    padding: EdgeInsets.all(16.0),
    child: Container(
      color: Colors.red,
      width: 50.0,
      height: 50.0,
    ),
  ),
)


마진, 패딩 

예제코드

Container(
  color: Colors.black, // ③ 최상위 검정 컨테이너 (margin이 적용되는 대상)
  child: Container(
    color: Colors.blue, // ② 중간 파란 컨테이너
	
    // 마진 적용 위치
    margin: EdgeInsets.all(16.0),
	
    // 패딩 적용
    child: Padding(
      padding: EdgeInsets.all(16.0),
	  
      // ① 패딩이 적용된 빨간 컨테이너
      child: Container(
        color: Colors.red,
        width: 50.0,
        height: 50.0,
      ),
    ),
  ),
)



========================================
Column 위젯으로 화면에 나타낼 요소가 화면을 넘어감. 
그래서, 
ListView 로 교체, 성능도 좋고, 스크롤도 이용, 
대부분의 화면 구성에 주력으로 많이 사용하는 위젯. 

기본 문법. 

ListView(
  children: [
    ListTile(title: Text('아이템 1')),
    ListTile(title: Text('아이템 2')),
    // ...
  ],
)

기본적으로, 가로 사이즈 전체 크기로 잡아줌. 

원래의 크기로 변경하는 방법들 중. 
Wrap 위젯으로 감싸서 , 원래의 크기로 변경을함. 

Wrap 위젯은 Flutter에서 
**공간이 부족하면 
자동으로 줄을 바꿔서(children을 배치)**주는 
레이아웃 위젯이야.
Row나 Column처럼 일렬 배치지만, 
공간이 부족할 때 줄바꿈이 가능한 유연한 버전이

Wrap(
  direction: Axis.horizontal, // 주축 방향 (기본: 가로)
  spacing: 8.0, // 각 child 사이 간격 (주축)
  runSpacing: 4.0, // 줄 간 간격 (교차축)
  alignment: WrapAlignment.start, // 주축 정렬
  runAlignment: WrapAlignment.start, // 교차축 정렬
  children: [...], // 배치할 위젯 목록
)

========================================
SafeArea

SafeArea 위젯을 사용하면 따로 기기별로 예외 처리를 하지 않고도 
안전한(Safe) 화면에서만 위젯을 그릴 수 있

SafeArea 위젯을 사용하면 따로 기기별로 예외 처리를 하지 않고도 
안전한(Safe) 화면에서만 위젯을 그릴 수 있


예제코드

SafeArea()
// 원하는 부위만 따로 적용할 수도 있습니다.
// true는 적용 false는 미적용
top: true,
bottom: true,
left: true,
right: true,
child: Container(
color: Colors.red,
height: 300.0,
width: 300.0,
),
),
========================================
배치 관련 위젯

배치 관련 위젯은 하위 위젯을 가로 
또는 세로로 배치하거나 위젯 위에 위젯을 겹칠 때 사용


ROw 위젯

Row는 Column과 함께 위젯을 가로세로로 배치하는 데 사용됩니다. 
Row는 말 그대로 가로로 위젯을 배치하는데 사용


Row와 Column에는 주축manaxis과 
반대축 cross aXis이라는 개념이 존재하는데 
Row는 가로가 주축, 세로가 반대축이 되고 
Column의 경우 반대가



Row 위젯의 주축과 반대축
-----------------------------------
주축: →→→ (가로 방향)
반대축: ↓ (세로 방향)

[ Row 위젯 ]
|   ▭  ▭  ▭  |
|   ▭  ▭  ▭  |
|   ▭  ▭  ▭  |
↑--------------------------↑
children 매개변수 안의 위젯들


Column 위젯의 주축과 반대축
-----------------------------------
주축: ↓↓ (세로 방향)
반대축: → (가로 방향)

[ Column 위젯 ]
▭
▭
▭
↑--------------------------↑
children 매개변수 안의 위젯들


Row 위젯 예제

import 'package:flutter/material.dart';

void main() {
  runApp(RowWidgetExample());
}

class RowWidgetExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: SizedBox(
          // 반대축에서 이동할 공간을 제공하기 위해 높이를 최대한으로 설정
          height: double.infinity,
          child: Row(
            // 주축 정렬 지정
            mainAxisAlignment: MainAxisAlignment.start,
            // 반대축 정렬 지정
            crossAxisAlignment: CrossAxisAlignment.center,
            // 넣고 싶은 위젯 입력
            children: [
              Container(
                height: 50.0,
                width: 50.0,
                color: Colors.red,
              ),
              // SizedBox는 일반적으로 공백을 생성할 때 사용
              SizedBox(width: 12.0),
              Container(
                height: 50.0,
                width: 50.0,
                color: Colors.green,
              ),
              SizedBox(width: 12.0),
              Container(
                height: 50.0,
                width: 50.0,
                color: Colors.blue,
              ),
            ],
          ),
        ),
      ),
    );
  }
}


✓ MainAxisAlignment 옵션
(예제는 모두 CrossAxisAlignment.center 기준)

옵션
MainAxisAlignment.start
설명
시작에 정렬
예제

MainAxisAlignment.center
중앙에 정렬

MainAxisAlignment.end
꽅에 정렬

MainAxisAlignment.spaceBetween 
자식 위젯의 간격을 균등하게 정렬

MainAxisAlignment.spaceAround
자식 위젯의 간격을 균등하게 배정하고 
왼쪽 끝과 오른쪽 끝을 위젯 사이 거리의 반만큼 배정해 정렬

MainAxisAlignment.spaceEvenly
자식 위젯의 간격을 균등하게 배치하고 
왼쪽 끝과 오른쪽 끝도 균등하게 배치



✓ CrossAxisAlignment 옵션
(예제는 모두 MainAxisAlignment.center 기준)
옵션
CrossAxisAlignment.start
설명
시작에 정렬
예제

CrossAxlisAlignment.center
중앙에 정렬

CrossAxisAlignment.end
끝에 정렬

CrossAxisAlignment.stretch
반대축 최대한으로 늘려서 정렬



Column 위젯

Column 위젯은 Row 위젯과 완전히 같은 매개변수들을 노출합니다. 
다만 Row에서 이미 설명 한 것처럼 주축과 반대축이 
Row와 반대로 이루

예제코드

import 'package:flutter/material.dart';

void main() {
  runApp(ColumnWidgetExample());
}

class ColumnWidgetExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: SizedBox(
          // 반대축에서 이동할 공간을 제공하기 위해 너비를 최대한으로 설정
          width: double.infinity,
          child: Column(
            // 주축 정렬 지정
            mainAxisAlignment: MainAxisAlignment.start,
            // 반대축 정렬 지정
            crossAxisAlignment: CrossAxisAlignment.center,
            // 넣고 싶은 위젯 입력
            children: [
              Container(
                height: 50.0,
                width: 50.0,
                color: Colors.red,
              ),
              // SizedBox는 일반적으로 공백을 생성할 때 사용
              SizedBox(height: 12.0), // 공백 추가 (Column이므로 height 사용)
              Container(
                height: 50.0,
                width: 50.0,
                color: Colors.green,
              ),
              SizedBox(height: 12.0), // 공백 추가
              Container(
                height: 50.0,
                width: 50.0,
                color: Colors.blue,
              ),
            ],
          ),
        ),
      ),
    );
  }
}


MainAxisAlignment와 CrossAxisAlignment를 변경했을 때 
어떤 UI를 구현할 수 있는지 표 로 정리해두었으니 참고하기 바랍니다.

MainAxisAlignment 옵션(예제는 
모두 CrossAxisAlignment.center 기준입니다)


Main AxisAlignment.start
시작에 정렬

MainAxisAlignment.center
중앙에 정렬

MainAxisAlignment.end
끝에 정렬

MainAxisAlignment.spaceBetween
자식 위젯의 간격을 균등하게 정렬

MainAxisAlignment.spaceAround
자식 위젯의 간격을 균등하게 배정하고 
위쪽 끝과 아래쪽 끝을 위젯 사이 거리의 반만 큼 배정해 정렬

MainAxisAlignment.spaceEvenly
자식 위젯의 간격을 균등하게 배치하고 
왼쪽 끝과 오른쪽 끝도 동일하게 균등하게 배치


CrossAxisAlignment 옵션
(예제는 모두 MainAwisAlignment.center 기준입니다)

CrossAxisAlignment.start
시작에 정렬

CrossAxlisAlignment.center
중앙에 정렬

CrossAxisAlignment.end
끝에 정렬


CrossAxisAlignment.stretch
반대축 최대한으로 늘려서 정렬


========================================
//오른쪽 상단의 디버그 화면을 제거
      debugShowCheckedModeBanner: false,
	  
	  
========================================
중첩 리스트 뷰 사용 기본, 문법, 

   // 가로 방향으로 스크롤이 되는 위젯
            SizedBox(
              height: 200,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: 5,
                itemBuilder: (context, hIndex) {
                  return Container(
                    width: 200,
                    margin: EdgeInsets.all(16),
                    color: Colors.redAccent,
                    alignment: Alignment.center,
                    child: Text('가로 $hIndex'),
                  );
                },
              ),
            ),
			
========================================
Flexible 위젯


Flexible 위젯은 Row나 Column에서 사용하는 위젯입니다. 
Flexible 위젯을 Column과 Row에서 사용하면 
Flexible에 제공된 child가 크기를 최소한으로 
차지하게 할 수

예제코드


Column(
          children: [
            Flexible(
              // flex는 남은 공간을 차지할 비율을 의미합니다.
              // flex값을 제공하지 않으면 기본값은 1입니다.
              flex: 1,
              // 파란색 Container
              child: Container(
                color: Colors.blue,
              ),
            ),
            Flexible(
              flex: 1,
              // 빨간색 Container
              child: Container(
                color: Colors.red,
              ),
            ),
          ],
        ),

~ 파란색 flex: 1, 빨간색 flex: 1일 때


✓ 파란색 flex: 3, 빨간색 flex: 1일 때



Expanded 위젯

Expanded 위젯은 Flexible 위젯을 상속하는 위젯입니다. 
Column과 Row에서 Expanded를 사용하면 
위젯이 남아 있는 공간을 최대한으로 차지

Flexible 위젯은 fit 매개변수에 
FlexFit.tight 또는 FlexFit.loose를 입력할 수 있습니다. 

FlexFit.loose는 자식 위젯이 필요한 만큼의 공간만 차지합니다. 
하지만 FlexFit.tight는 자식 위젯이 차지하는 공간과 관계없이
남은 공간을 모두 차지합니다. 

Expanded 위젯은 Flexible 위젯의 fit 매개변수에 
FlexFit.tight를 기본으로 제공해준 위젯입니다. 

그래서 Flexible 위젯과 다르게 남는 공간을 
최대한으로 차지하게 됩니다.

예제코드



Column(
          children: [
            // 파란색 Container
            Expanded(
              child: Container(
                color: Colors.blue,
              ),
            ),
            // 빨간색 Container
            Expanded(
              child: Container(
                color: Colors.red,
              ),
            ),
          ],
        ),



Stack 위젯

Row와 Column 위젯은 각각 가로와 세로로 위젯을 
배치하는 역할을 합니다. 

반면 Stack 위젯은 위젯을 겹치는 기능을 제공해줍니다. 
플러터의 그래픽 엔진인 스키아 엔진은 
2D 엔진이기 때문에 겹친 두께를 표현하지는 못하지만 

Stack을 사용하면 위젯 위에 위젯을 올린 듯한 효과

예제코드



Stack(
            children: [
              // 빨간색 Container
              Container(
                height: 300.0,
                width: 300.0,
                color: Colors.red,
              ),
              // 노란색 Container
              Container(
                height: 250.0,
                width: 250.0,
                color: Colors.yellow,
              ),
              // 파란색 Container
              Container(
                height: 200.0,
                width: 200.0,
                color: Colors.blue,
              ),
            ],
          ),



========================================

========================================