#플러터 #모바일개발

공공데이터 연동 작업 해보기.
 

1. 
splash 화면에서, 스테이트 풀 화면으로 변경. 
stful 코드 스니펫으로 작업 후. 
단순, 3초후, 특정 페이지로 라우팅 기능만 추가하고, 
화면은 재사용 했음. 
예제 코드 
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class MySplashScreen2 extends StatefulWidget {
  const MySplashScreen2({super.key});

  @override
  State<MySplashScreen2> createState() => _MySplashScreen2State();
}

class _MySplashScreen2State extends State<MySplashScreen2> {

  @override
  void initState() {
    super.initState();
    //현재 화면을 , 특정 시간 후에, 메인 화면으로 이동하는게 목적.
    Future.delayed(const Duration(seconds: 3),(){
      Navigator.pushReplacementNamed(context, '/main');
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        body: Container(
          decoration: BoxDecoration(
            color: Colors.amberAccent,
          ),
          child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              // child: Text("Splash Screen!!")
              children:[
                Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                        style: TextStyle(
                            fontSize: 32,
                            fontWeight: FontWeight.w800
                        ),
                        '나의 첫 Splash 화면'),
                    Image.asset(
                      'assets/images/logo.jpg',
                      width: 400,
                    ),
                    SizedBox(height: 16,),
                    CircularProgressIndicator(),
                  ],
                )

              ]
          ),
        ),
      ),
    );
  }
}

공공데이터 연동 준비물, 
오픈 API 서버에 통신을 하기위한 외부 라이브러리 설치. 

pubspec.yaml 파일에서, 

# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8
#  사용할 외부 라이브러리 추가.
  provider: ^6.0.5
  http: ^0.13.6
  dio: ^5.8.0+1

1
provider: ^6.0.5
Flutter에서 상태 관리를 위한 라이브러리입니다.

Flutter 앱에서 데이터나 UI 상태를 관리하고, 
이를 위젯 트리에 효율적으로 전파합니다.

예: 로그인 상태, 테마 변경, API 응답 저장 등

ChangeNotifier, Consumer, Provider 등을 통해 
데이터와 UI를 연동합니다.

2
http: ^0.13.6
가장 기본적인 HTTP 통신 라이브러리입니다.

REST API 요청 (GET, POST 등)을 보낼 때 사용합니다.

간단한 네트워크 요청 처리에 적합합니다.

직접 헤더, 바디 등을 구성해서 보냅니다.


3
dio: ^5.8.0+1
더 강력하고 기능이 풍부한 
HTTP 클라이언트 라이브러리입니다.

http보다 기능이 많음: 요청 인터셉터, 
응답 캐싱, 에러 핸들링, FormData 처리, 다중 요청 등

파일 업로드/다운로드나 고급 API 통신에서 자주 사용합니다.

작업 후, 오른쪽 상단에, Pub get 적용하기. 

-------------------------------------------------------
MVC 패턴 거의 비슷, 

Consumer(화면) Provider(컨트롤러) 패턴, 

화면 <-데이터반영->컨트롤러<--http:통신,데이터 연동-> 서버 

준비물 2개: 1) 화면, 2) 컨트롤러

공공데이터 오픈 api 서버의  요청 주소, 파라미터 다 포함. 
https://apis.data.go.kr/6260000/FoodService/getFoodKr?serviceKey=ALRX9GpugtvHxcIO%2FiPg1vXIQKi0E6Kk1ns4imt8BLTgdvSlH%2FAKv%2BA1GcGUQgzuzqM3Uv1ZGgpG5erOTDcYRQ%3D%3D&pageNo=1&numOfRows=100&resultType=json

데이터 구조 
{
    "getFoodKr": {
        "header": {
            "code": "00",
            "message": "NORMAL_CODE"
        },
        "item": [
            {
                "UC_SEQ": 70,
                "MAIN_TITLE": "만드리곤드레밥",
                "GUGUN_NM": "강서구",
                "LAT": 35.177387,
                "LNG": 128.95245,
                "PLACE": "만드리곤드레밥",
                "TITLE": "만드리곤드레밥",
                "SUBTITLE": "",
                "ADDR1": "강서구 공항앞길 85번길 13",
                "ADDR2": "",
                "CNTCT_TEL": "051-941-3669",
                "HOMEPAGE_URL": "",
                "USAGE_DAY_WEEK_AND_TIME": "10:00-20:00\n(19:50 라스트오더)",
                "RPRSNTV_MENU": "돌솥곤드레정식, 단호박오리훈제",
                "MAIN_IMG_NORMAL": "https://www.visitbusan.net/uploadImgs/files/cntnts/20191209162810545_ttiel",
                "MAIN_IMG_THUMB": "https://www.visitbusan.net/uploadImgs/files/cntnts/20191209162810545_thumbL",
                "ITEMCNTNTS": "곤드레밥에는 일반적으로 건조 곤드레나물이 사용되는데,\n이곳은 생 곤드레나물을 사용하여 돌솥밥을 만든다.\n된장찌개와 함께 열 가지가 넘는 반찬이 제공되는 돌솥곤드레정식이 인기있다\n"
            },
            {
                "UC_SEQ": 77,
                "MAIN_TITLE": "민물가든",
                "GUGUN_NM": "강서구",
                "LAT": 35.16055,
                "LNG": 128.89468,
                "PLACE": "민물가든",
                "TITLE": "민물가든",
                "SUBTITLE": "민물가든",
                "ADDR1": "강서구 둔치중앙길5(봉림동) ",
                "ADDR2": "",
                "CNTCT_TEL": "051-971-8428",
                "HOMEPAGE_URL": "https://blog.naver.com/rladba1",
                "USAGE_DAY_WEEK_AND_TIME": "24.03.12 ~ 24. 12.31 휴업중\n11:00a.m. ~ 21:00p.m.\n(break time 15:00~17:00)",
                "RPRSNTV_MENU": "묵은지붕어조림, 붕어찜",
                "MAIN_IMG_NORMAL": "https://www.visitbusan.net/uploadImgs/files/cntnts/20191217101816206_ttiel",
                "MAIN_IMG_THUMB": "https://www.visitbusan.net/uploadImgs/files/cntnts/20191217101816206_thumbL",
                "ITEMCNTNTS": "30년간 운영해온 생선찜전문점으로, 전통방식인 나무통을 사용하여 조리하는 것이 특징이다. 20가지 이상의 재료로 만든 양념을 사용하는 이 곳은 묵은지 붕어조림과 붕어찜이 대표메뉴이다.\n\n"
            },

1) 컨트롤러 작업, 

// 부산광역시_부산맛집정보 서비스
// 모델과,
// 컨트롤러 클래스 정의.
import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:http/http.dart' as http;

class FoodItem {
  final String? mainTitle;
  final String? title;
  final String? image;

  FoodItem({this.mainTitle, this.title, this.image});

  factory FoodItem.fromJson(Map<String, dynamic> json) {
    return FoodItem(
      mainTitle: json['MAIN_TITLE'],
      title: json['TITLE'],
      image: json['MAIN_IMG_NORMAL'],
    );
  }
}


//컨트롤러 작업,
class FoodController with ChangeNotifier {
  final List<FoodItem> _items = [];
  bool _isLoading = false;

  List<FoodItem> get items => _items;
  bool get isLoading => _isLoading;

  Future<void> fetchFoodData() async {
    _isLoading = true;
    notifyListeners();

    //serviceKey	인증키
    // numOfRows	한 페이지 결과 수
    // pageNo	페이지 번호
    // resultType	JSON방식 호출
    final queryParams ={
      'serviceKey': 'ALRX9GpugtvHxcIO/iPg1vXIQKi0E6Kk1ns4imt8BLTgdvSlH/AKv+A1GcGUQgzuzqM3Uv1ZGgpG5erOTDcYRQ==',
      'pageNo': '1',
      'numOfRows': '100',
      'resultType': 'json',
    };
//서비스 URL	http://apis.data.go.kr/6260000/FoodService
    // 부산맛집정보 서비스	getFoodKr	부산맛집 국문 정보
    final uri = Uri.https(
      'apis.data.go.kr',
      '/6260000/FoodService/getFoodKr',
      queryParams,
    );
    try {

      final response = await http.get(uri);
      if (response.statusCode == 200) {
        //서버에서 받은 바이트 데이터를 UTF-8로 디코딩한 후, JSON 파싱.
        // response.body 대신 bodyBytes를 쓰는 이유: 한글이나 특수문자 인코딩 오류 방지
        final decoded = jsonDecode(utf8.decode(response.bodyBytes));
        final dynamic foodData = decoded['getFoodKr'];

        if (foodData is Map<String, dynamic> && foodData['item'] is List) {
          final List<dynamic> itemList = foodData['item'];
          _items.clear();
          _items.addAll(itemList.map((e) => FoodItem.fromJson(e)).toList());
        } else {
          debugPrint('데이터 구조가 예상과 다릅니다: ${jsonEncode(foodData)}');
        }
      } else {
        debugPrint('서버 오류: ${response.statusCode}');
      }
    } catch (e) {
      debugPrint('데이터 로딩 실패: $e');
    }

    _isLoading = false;
    //ChangeNotifier를 통해 UI에 변경을 알림.
    notifyListeners();
  }
}


2) 화면 작업, 
import 'package:busanit501_flutter_test/sample_routing/pd_test_controller/food_controller.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class MyPdTestScreen extends StatelessWidget {
  const MyPdTestScreen({super.key});

  @override
  Widget build(BuildContext context) {
    // Provider 패턴을 이용해서, 데이터를 받아오면, 화면에 연동하는 작업,
    return ChangeNotifierProvider(
      create: (_) => FoodController()..fetchFoodData(),
      child: Scaffold(
        appBar: AppBar(title: const Text('부산 맛집 정보 서비스')),
        body: Consumer<FoodController>(
          builder: (context, controller, _) {
            if (controller.isLoading) {
              return const Center(child: CircularProgressIndicator());
            }
            if (controller.items.isEmpty) {
              return const Center(child: Text('데이터가 없습니다.'));
            }
            return ListView.builder(
              itemCount: controller.items.length,
              itemBuilder: (context, index) {
                final item = controller.items[index];
                return Card(
                  margin: const EdgeInsets.all(10),
                  child: ListTile(
                    leading:
                        item.image != null
                            ? Image.network(
                              item.image!,
                              width: 80,
                              fit: BoxFit.cover,
                            )
                            : const Icon(Icons.image_not_supported),
                    title: Text(item.mainTitle ?? ""),
                    subtitle: Text(item.title ?? ""),
                  ),
                );
              },
            );
          },
        ),
      ),
    );
  }
}

3) 
메인에, Provider  를 등록 작업 필요. 

void main() {
  // runApp(MyApp());
  // 프로바이더 등록 작업, 
  // runApp(MyAppRouting());
  runApp(
    MultiProvider(
        providers: [
          ChangeNotifierProvider(create: (context) => FoodController())
        ],
    child: const MyAppRouting(),)
  );
}



