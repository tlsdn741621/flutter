4.4 클래스 제한자

다트 3.0 버전에는 다양한 클래스 제한자class modifiers가
새로 추가됐습니다.
추가된 클래스 제한자는
base, final, interface, sealed, mixin 입니다.

모든 클래스 제한자는 class 키워드 앞에 명시합니다.

클래스 제한자를 명시한 클래스는 해당 클래스를 사용하는 파일이
아닌 다른 파일에 선언해야 정상으로 기능이 작동합니다.

4.4.1 base 제한자

base 제한자는 base 클래스의 기능을 강제하는 제한자입니다.
base 키워드를 사용하게 되면 해당 클래스는

오직 상속만 할 수 있게 됩니다.

그리고 base 클래스가 아닌 자식 클래스는
꼭 base, final 또는 sealed 제한자를 함께 사용해줘야 합니다.

lib/4.4/1_a.dart

base class Parent{}


lib/4.4/1_b.dart

import '1_a.dart';

Parent parent = Parent();

// 가능
base class Child extends Parent{}

// subtype of base or final is not base final or sealed 에러가 발생합니다.
// base/ sealed / final 제한자 중 하나가 필요합니다.

class Child2 extends Parent{}

// subtype of base or final is not base final or sealed 에러가 발생합니다.

// base 클래스는 implements 불가능합니다.

class Child3 implements Parent{}


4.4.2 final 제한자

final 제한자를 사용하면 같은 파일에서
상속 extend과
재정의implement를 할 수 있지만

외부 파일에 서는 할 수 없습니다.

그리고 final 제한자는 base 제한자의 기능을 모두 포함합니다.

lib/4.4/2_a.dart

final class Parent{}

lib/4.4/2_b.dart

import '2_a.dart';

// 인스턴스화 가능
Parent parent = Parent();

// extend 불가능
class Child extends Parent{}

// implement 불가능
class Child2 implements Parent{}


4.4.3 interface 제한자

interface 제한자는 클래스를 외부 파일에서 상속받지 못하고
재정의만 할 수 있도록 제한하는 역할을 합니다.

lib/4.4/3_a.dart

interface class Parent{}

lib/4.4/3_b.dart

import '3_a.dart';

// 인스턴스화 가능
Parent parent = Parent();

// extend 불가능
class Child1 extends Parent{}

// implement
class Child2 implements Parent{}



4.4.4 sealed 제한자

sealed 제한자는 sealed 클래스를 파일 외부에서
상속, 재정의 그리고 인스턴스화할 수 없도록 제한합니다.

lib/4.4/4_a.dart

sealed class Parent{}

lib/4.4/4_b.dart

import '4_a.dart';

// 인스턴스화 불가능
Parent parent = Parent();

// extend 불가능
class Child1 extends Parent {}

// implement 불가능
class Child2 implements Parent {}


4.4.5 mixin 제한자

다트 3.0부터는 mixin을 클래스에 사용할 수 있게 되었습니다.
일반 mixin과 같은 역할을 하면 서도
상속할 수 있다는 장점이 있습니다.

lib/4.4/5.dart

mixin class MixinExample{}

// extend 가능
class Child1 extends MixinExample{}

// mixin으로 사용 가능
class Child2 with MixinExample{}


학습 마무리
이번 장에서는 다트 3.0 신규 문법에 대해 알아봤습니다.
다트 3.0 이상 버전부터 새롭게 추가된 레코드와
타입 내부의 값을 분해해서 직접 추출해오는
구조 분해가 있습니다.

또한 4가지 문법이 추가된 switch문과
객체지향 프로그래밍 언어인 다트의 캡슐화와
클래스의 고유성을 위해 클래스 제한자를 제공합니다.

플러터 3.0 버전부터는 다트 3.0 버전 이상을 사용하기 때문에
추가된 신규 문법을 꼭 학습하고 넘어가길 바랍니다.

핵심 요약
1 레코드는 새로운 타입으로 네임드 파라미터와
포지셔널 파라미터가 있습니다.

2 구조 분해는 타입 내부의 각각의 값을 직접 추출해오는 문법입니다.

3 switch문에는 표현식, 패턴 매칭, 완전 확인, 가드 절이
추가되어 다양한 방법으로 조건을 확 인할 수 있습니다.

4 객체지향 프로그래밍 언어의 특징 중 하나인 클래스의
고유성을 위해 다양한 클래스 제한자가 추가되었습니다.

5 클래스 제한자는 여러 개를 조합해서 사용할 수 있습니다.
다음 표는 여러 클래스 제한자를 조합했을 때
허가되는 기능을 정리한 표입니다.

선언 (Declaration)           인스턴스화 가능 여부 (Construct)   상속 가능 여부 (Extend)   인터페이스 구현 가능 여부 (Implement)   믹스인 가능 여부 (Mixin)   엄격한 검사 가능 여부 (Exhaustive)
--------------------------------------------------------------------------------------------------------------------------
class                          가능                             가능                        가능                           불가능                      불가능
base class 배상                 가능                             가능                        불가능                           불가능                      불가능
interface class 인구            가능                             불가능                      가능                           불가능                      불가능
final class   파인              가능                             불가능                      불가능                         불가능                    불가능
sealed class     엄검           불가능                           불가능                      불가능                         불가능                    가능
abstract class   추상구         불가능                           가능                        가능                           불가능                      불가능
abstract base class            불가능                           가능                        불가능                           불가능                      불가능
abstract interface class       불가능                           불가능                      가능                           불가능                      불가능
abstract final class           불가능                           불가능                      불가능                         불가능                    불가능
mixin class                    가능                             가능                        가능                           가능                      불가능
base mixin class               가능                             가능                        불가능                         가능                      불가능
abstract mixin class           불가능                           가능                        가능                           가능                      불가능
abstract base mixin class      불가능                           가능                        불가능                           가능                      불가능
mixin                          불가능                           불가능                      가능                           가능                      불가능
base mixin                     불가능                           불가능                      불가능                         가능                      불가능
